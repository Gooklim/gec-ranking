#!/usr/bin/env python

# Courtney Napoles
# <courtneyn@jhu.edu>
# 21 June 2015
# ##
# compute_gleu
# 
# This script calls gleu.py to calculate the GLEU score of a sentence, as 
# described in our ACL 2015 paper, Ground Truth for Grammatical Error 
# Correction Metrics by Courtney Napoles, Keisuke Sakaguchi, Matt Post, 
# and Joel Tetreault.
# 
# For instructions on how to get the GLEU score, call "compute_gleu -h"
#
# This script was adapted from compute-bleu by Adam Lopez.
# <https://github.com/alopez/en600.468/blob/master/reranker/>

import argparse
import sys
import os
from gleu import GLEU

if __name__ == '__main__' :
    
    parser = argparse.ArgumentParser()
    parser.add_argument("-r", "--reference", 
                        help="Target language reference sentences. Multiple files for "
                        " multiple references.",
                        nargs="*",
                        dest="reference",
                        default=["data/dev.ref"]) 
    parser.add_argument("-s", "--source",
                        help="Source language source sentences",
                        dest="source", 
                        default="data/dev.src")
    parser.add_argument("-o", "--hypothesis", 
                        help="Target language hypothesis sentences to evaluate (can "
                        "be more than one file--the GLEU score of each file will be) "
                        "output separately. Use '-o -' to read hypotheses from stdin.",
                        nargs="*", 
                        dest="hypothesis", 
                        default=["data/dev.hyp"])
    parser.add_argument("-n",
                        help="Maximum order of ngrams",
                        type=int,
                        default=4)
    parser.add_argument("-l",
                        help="Lambda weight for penalizing incorrectly unchanged n-grams",
                        nargs='*',
                        default=[0])
    parser.add_argument("-d","--debug",
                        help="Debug; print sentence-level scores",
                        default=False,
                        action="store_true")
    parser.add_argument('-version',default=0.
                        type=int,
                        help='which version of GLEU to use.'
                        '\t0: (R^H-S\R^H)/(R^H)\n'
                        '\t1: (R^H-S\R^H)/(R^H) randomly sampled 1k times, using one randomly selected reference each time\n'
                        '\t2: (R^H-S\R_w^H)/(R^H), where R_w is the normalized count\n'
                        '\t3: (R_w\S^H+R^H-S\R_w^H)/(R^H), where R_w is the normalized count\n'
    parser.add_argument('--randsamp',default=False,
                        action='store_true',
                        help='randomly sample a reference for each sentence, and repeat 1,000 times')
    
    args = parser.parse_args()

    num_iterations = 1000 if args.randsamp else 1
    version = 1 if args.randsamp else 0
    
    gleu_calculator = GLEU(args.n,args.l)

    gleu_calculator.load_sources(args.source)
    gleu_calculator.load_references(args.reference)
    
    for hpath in args.hypothesis :
        instream = sys.stdin if hpath == '-' else open(hpath)
        hyp = [line.split() for line in instream]

        for l in args.l :
            l = float(l)
            gleu_calculator.set_lambda(l)
            print os.path.basename(hpath),l,

            if args.debug :
                print
                print '===== Sentence-level scores ====='
                print 'SID\tGLEU'
                
            stats = [0 for i in xrange(2*args.n+2)]
            for i,h in enumerate(hyp):
                for i in range(num_iterations) :
                    this_stats = [ s for s in gleu_calculator.gleu_stats(h,i,version=version) ]
                    if args.debug :
                        print '%d\t%f'%(i,gleu_calculator.gleu(this_stats))
                        stats = [sum(scores) for scores in zip(stats, this_stats)]
            if args.debug :
                print '\n==== Overall score ====='
            print gleu_calculator.gleu(stats)
